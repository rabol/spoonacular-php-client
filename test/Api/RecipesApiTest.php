<?php
/**
 * RecipesApiTest
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use PHPUnit\Framework\TestCase;

/**
 * RecipesApiTest Class Doc Comment
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */
class RecipesApiTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for analyzeARecipeSearchQuery
     *
     * Analyze a Recipe Search Query.
     */
    public function testAnalyzeARecipeSearchQuery()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for analyzeRecipeInstructions
     *
     * Analyze Recipe Instructions.
     */
    public function testAnalyzeRecipeInstructions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for autocompleteRecipeSearch
     *
     * Autocomplete Recipe Search.
     */
    public function testAutocompleteRecipeSearch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for classifyCuisine
     *
     * Classify Cuisine.
     */
    public function testClassifyCuisine()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for computeGlycemicLoad
     *
     * Compute Glycemic Load.
     */
    public function testComputeGlycemicLoad()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertAmounts
     *
     * Convert Amounts.
     */
    public function testConvertAmounts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createRecipeCard
     *
     * Create Recipe Card.
     */
    public function testCreateRecipeCard()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for equipmentByIDImage
     *
     * Equipment by ID Image.
     */
    public function testEquipmentByIDImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for extractRecipeFromWebsite
     *
     * Extract Recipe from Website.
     */
    public function testExtractRecipeFromWebsite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAnalyzedRecipeInstructions
     *
     * Get Analyzed Recipe Instructions.
     */
    public function testGetAnalyzedRecipeInstructions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRandomRecipes
     *
     * Get Random Recipes.
     */
    public function testGetRandomRecipes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRecipeEquipmentByID
     *
     * Equipment by ID.
     */
    public function testGetRecipeEquipmentByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRecipeInformation
     *
     * Get Recipe Information.
     */
    public function testGetRecipeInformation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRecipeInformationBulk
     *
     * Get Recipe Information Bulk.
     */
    public function testGetRecipeInformationBulk()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRecipeIngredientsByID
     *
     * Ingredients by ID.
     */
    public function testGetRecipeIngredientsByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRecipeNutritionWidgetByID
     *
     * Nutrition by ID.
     */
    public function testGetRecipeNutritionWidgetByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRecipePriceBreakdownByID
     *
     * Price Breakdown by ID.
     */
    public function testGetRecipePriceBreakdownByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRecipeTasteByID
     *
     * Taste by ID.
     */
    public function testGetRecipeTasteByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSimilarRecipes
     *
     * Get Similar Recipes.
     */
    public function testGetSimilarRecipes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for guessNutritionByDishName
     *
     * Guess Nutrition by Dish Name.
     */
    public function testGuessNutritionByDishName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for ingredientsByIDImage
     *
     * Ingredients by ID Image.
     */
    public function testIngredientsByIDImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for parseIngredients
     *
     * Parse Ingredients.
     */
    public function testParseIngredients()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for priceBreakdownByIDImage
     *
     * Price Breakdown by ID Image.
     */
    public function testPriceBreakdownByIDImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for quickAnswer
     *
     * Quick Answer.
     */
    public function testQuickAnswer()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recipeNutritionByIDImage
     *
     * Recipe Nutrition by ID Image.
     */
    public function testRecipeNutritionByIDImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recipeNutritionLabelImage
     *
     * Recipe Nutrition Label Image.
     */
    public function testRecipeNutritionLabelImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recipeNutritionLabelWidget
     *
     * Recipe Nutrition Label Widget.
     */
    public function testRecipeNutritionLabelWidget()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recipeTasteByIDImage
     *
     * Recipe Taste by ID Image.
     */
    public function testRecipeTasteByIDImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRecipes
     *
     * Search Recipes.
     */
    public function testSearchRecipes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRecipesByIngredients
     *
     * Search Recipes by Ingredients.
     */
    public function testSearchRecipesByIngredients()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRecipesByNutrients
     *
     * Search Recipes by Nutrients.
     */
    public function testSearchRecipesByNutrients()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for summarizeRecipe
     *
     * Summarize Recipe.
     */
    public function testSummarizeRecipe()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizeEquipment
     *
     * Equipment Widget.
     */
    public function testVisualizeEquipment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizePriceBreakdown
     *
     * Price Breakdown Widget.
     */
    public function testVisualizePriceBreakdown()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizeRecipeEquipmentByID
     *
     * Equipment by ID Widget.
     */
    public function testVisualizeRecipeEquipmentByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizeRecipeIngredientsByID
     *
     * Ingredients by ID Widget.
     */
    public function testVisualizeRecipeIngredientsByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizeRecipeNutrition
     *
     * Recipe Nutrition Widget.
     */
    public function testVisualizeRecipeNutrition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizeRecipeNutritionByID
     *
     * Recipe Nutrition by ID Widget.
     */
    public function testVisualizeRecipeNutritionByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizeRecipePriceBreakdownByID
     *
     * Price Breakdown by ID Widget.
     */
    public function testVisualizeRecipePriceBreakdownByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizeRecipeTaste
     *
     * Recipe Taste Widget.
     */
    public function testVisualizeRecipeTaste()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for visualizeRecipeTasteByID
     *
     * Recipe Taste by ID Widget.
     */
    public function testVisualizeRecipeTasteByID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
